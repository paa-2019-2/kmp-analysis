(merge_sort_correctness
 (merge_preserves_occurrences 0
  (merge_preserves_occurrences-1 nil 3781005711 ("" (postpone) nil nil)
   nil shostak))
 (merge_preserves_len 0
  (merge_preserves_len-1 nil 3780873327
   ("" (measure-induct "length(l1) + length(l2)" (l1 l2))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (rewrite "length_append") nil nil)
             ("2" (rewrite "length_append") nil nil)
             ("3" (expand "length" 1 1)
              (("3" (inst -2 "cdr(x_1)" "x_2")
                (("3" (prop)
                  (("1" (expand "length" 1 2)
                    (("1" (assert)
                      (("1" (replaces)
                        (("1" (expand "length" 1 3)
                          (("1" (replaces)
                            (("1" (expand "length" -1 2)
                              (("1"
                                (expand "merge" -1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil)
             ("4" (expand "length" 2 1)
              (("4" (inst -1 "x_1" "cdr(x_2)")
                (("4" (prop)
                  (("1" (expand "length" 2 3)
                    (("1" (replaces)
                      (("1" (expand "length" 2 1)
                        (("1" (replaces)
                          (("1" (expand "length" -1 1)
                            (("1" (expand "merge" -1)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1" (grind) nil nil)
                                       ("2" (grind) nil nil)
                                       ("3" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (merge def-decl "list[nat]" mergesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak))
 (merge_permutes 0
  (merge_permutes-1 nil 3780935773 ("" (postpone) nil nil) nil
   shostak))
 (mergesort_preserves_len 0
  (mergesort_preserves_len-1 nil 3780995111
   ("" (measure-induct "length(l)" l)
    (("" (skeep)
      (("" (expand "merge_sort" 1)
        (("" (lift-if)
          (("" (prop)
            (("" (lemma "merge_preserves_len")
              ((""
                (inst -1 "merge_sort(prefix(x, floor(length(x) / 2)))"
                 "merge_sort(suffix(x, floor(length(x) / 2)))")
                (("" (replace -1 (2) RL)
                  (("" (inst-cp -2 "prefix(x, floor(length(x) / 2))")
                    (("" (inst -2 "suffix(x, floor(length(x) / 2))")
                      (("" (hide -1 1)
                        (("" (rewrite "length_prefix")
                          (("" (rewrite "length_suffix")
                            (("" (prop)
                              (("1" (assert) nil nil)
                               ("2" (grind) nil nil)
                               ("3"
                                (assert)
                                (("3" (grind) nil nil))
                                nil)
                               ("4" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (merge_sort def-decl "list[nat]" mergesort nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (prefix def-decl "list[nat]" sorting nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (suffix def-decl "list[nat]" sorting nil)
    (length_suffix formula-decl nil sorting nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_prefix formula-decl nil sorting nil)
    (merge_preserves_len formula-decl nil merge_sort_correctness nil))
   shostak))
 (mergesort_permutes 0
  (mergesort_permutes-1 nil 3780950637 ("" (postpone) nil nil) nil
   shostak))
 (mergesort_sorts 0
  (mergesort_sorts-1 nil 3780946864 ("" (postpone) nil nil) nil
   shostak))
 (mergesort_correctness 0
  (mergesort_correctness-1 nil 3780945719
   ("" (skeep)
    (("" (split)
      (("1" (lemma "mergesort_sorts") (("1" (inst?) nil nil)) nil)
       ("2" (lemma "mergesort_permutes") (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   ((mergesort_permutes formula-decl nil merge_sort_correctness nil)
    (mergesort_sorts formula-decl nil merge_sort_correctness nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak)))

