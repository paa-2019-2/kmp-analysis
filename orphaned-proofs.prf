("merge_sort_correctness" merge_sort_correctness mergesort_sorts 0 (mergesort_sorts-1 nil 3780944798 ("" (skeep) (("" (postpone) nil nil)) nil) nil shostak))("merge_sort_correctness" merge_sort_correctness append_merge_occurrences 0 (append_merge_occurrences-1 nil 3781263873 ("" (skolem 1 ("_" "_" "n")) (("" (skeep) (("" (lemma "merge_preserves_occurrences") (("" (inst -1 "l1" "l2" "n") (("" (grind) (("" (replace -1 1 rl) (("" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("merge_sort_correctness" merge_sort_correctness merge_sort_prop 0 (merge_sort_prop-1 nil 3781379834 ("" (postpone) nil nil) nil shostak))("merge_sort_correctness" merge_sort_correctness merge_sort_prop_TCC2 0 (merge_sort_prop_TCC2-1 nil 3781369404 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_sorted? const-decl "bool" sorting nil)) nil))("merge_sort_correctness" merge_sort_correctness merge_sort_prop_TCC1 0 (merge_sort_prop_TCC1-1 nil 3781369404 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (is_sorted? const-decl "bool" sorting nil)) nil))("merge_sort_correctness" merge_sort_correctness merge_null_is_sorted 0 (merge_null_is_sorted-1 nil 3781369405 ("" (induct l) (("1" (flatten) (("1" (expand "merge") (("1" (expand "append") (("1" (prop) nil nil)) nil)) nil)) nil) ("2" (skeep) (("2" (prop) (("1" (expand "merge" 1) (("1" (rewrite "append_null_2") nil nil)) nil) ("2" (expand "merge" 1) (("2" (rewrite "append_null") nil nil)) nil) ("3" (expand "merge" 1) (("3" (rewrite "append_null_2") nil nil)) nil) ("4" (expand "merge" 1) (("4" (rewrite "append_null") nil nil)) nil)) nil)) nil)) nil) ((append_null formula-decl nil list_props nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (append_null_2 formula-decl nil merge_sort_correctness nil) (append def-decl "list[T]" list_props nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (null adt-constructor-decl "(null?)" list_adt nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (merge def-decl "list[nat]" mergesort nil) (is_sorted? const-decl "bool" sorting nil) (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) shostak))("mergesort_complexity" mergesort_complexity length_auxiliar 0 (length_auxiliar-1 nil 3781429027 ("" (induct l) (("1" (expand length) (("1" (assert) nil nil)) nil) ("2" (skeep) (("2" (expand length) (("2" (assert) nil nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (list_induction formula-decl nil list_adt nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (bool nonempty-type-eq-decl nil booleans nil) (>= const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (length def-decl "nat" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) nil (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil)) shostak))("mergesort_complexity" mergesort_complexity log_auxiliar 0 (log_auxiliar-1 nil 3781425682 ("" (postpone) nil nil) nil shostak))("mergesort_complexity" mergesort_complexity Log_auxiliar 0 (Log_auxiliar-1 nil 3781967442 ("" (induct x) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil) nil shostak))("mergesort_complexity" mergesort_complexity merge_sort_is_nlogn_TCC2 0 (merge_sort_is_nlogn_TCC2-1 nil 3781994127 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (every adt-def-decl "boolean" list_adt nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (>= const-decl "bool" reals nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) (log_gt1 const-decl "[{r | r >= 1} -> nnreal]" nn_log "power/") (inverse const-decl "D" function_inverse nil) (nn_log const-decl "nnreal" nn_log "power/") (log const-decl "real" log "power/") (nnreal_times_nnreal_is_nnreal application-judgement "nnreal" real_types nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_times_real_is_real application-judgement "real" reals nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_le_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))