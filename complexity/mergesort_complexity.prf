(mergesort_complexity
 (cmerge_equiv_merge 0
  (cmerge_equiv_merge-1 nil 3782153499
   ("" (measure-induct "length(l1)+length(l2)" (l1 l2))
    (("" (skeep)
      (("" (skeep)
        (("" (expand merge 1)
          (("" (expand cmerge 1)
            (("" (lift-if)
              (("" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (merge def-decl "list[nat]" mergesort nil)
    (cmerge def-decl "[list[nat], nat]" cmergesort nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (count_cmerge_ws 0
  (count_cmerge_ws-1 nil 3782514218
   ("" (induct l1)
    (("1" (expand "cmerge")
      (("1" (expand "length" 1 2)
        (("1" (skeep) (("1" (typepred l2) (("1" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (induct l2)
        (("1" (expand "cmerge" 1) (("1" (grind) nil nil)) nil)
         ("2" (skeep) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cmerge def-decl "[list[nat], nat]" cmergesort nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (cmerge_general_case 0
  (cmerge_general_case-1 nil 3782514483
   ("" (induct l1)
    (("1" (induct l2)
      (("1" (skeep)
        (("1" (expand "cmerge")
          (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (inst -1 c)
            (("2" (expand "length" -1 1)
              (("2" (expand "length" 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (induct l2)
        (("1" (inst -1 null)
          (("1" (skeep)
            (("1" (inst -1 c)
              (("1" (expand "length" -1 2)
                (("1" (expand "length" 1)
                  (("1" (expand "cmerge" 1) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (inst -2 "cons(cons1_var_1, cons2_var_1)")
              (("2" (inst -2 c)
                (("2" (inst -1 c)
                  (("2" (expand "length" 1) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (cmerge def-decl "[list[nat], nat]" cmergesort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (cmerge_sort_equiv_merge_sort 0
  (cmerge_sort_equiv_merge_sort-1 nil 3783262337
   ("" (measure-induct "length(l)" l)
    (("" (skeep)
      (("" (expand cmerge_sort 1)
        (("" (expand merge_sort 1)
          (("" (lift-if)
            (("" (prop)
              (("" (copy -1)
                (("" (inst -1 "prefix(x, floor(length(x) / 2))")
                  (("" (inst -2 "suffix(x, floor(length(x) / 2))")
                    (("" (use "length_suffix")
                      (("" (use "length_prefix")
                        (("" (replaces)
                          (("" (prop)
                            (("1" (replaces)
                              (("1"
                                (use cmerge_equiv_merge)
                                (("1"
                                  (use cmerge_equiv_merge)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (prefix def-decl "list[nat]" sorting nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (length_suffix formula-decl nil sorting nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (cmerge_equiv_merge formula-decl nil mergesort_complexity nil)
    (length_prefix formula-decl nil sorting nil)
    (suffix def-decl "list[nat]" sorting nil)
    (merge_sort def-decl "list[nat]" mergesort nil)
    (cmerge_sort def-decl "[list[nat], nat]" cmergesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (merge_sort_ws_TCC1 0
  (merge_sort_ws_TCC1-1 nil 3782076201 ("" (subtype-tcc) nil nil) nil
   nil))
 (merge_sort_ws 0
  (merge_sort_ws-1 nil 3782076205
   ("" (measure-induct "length(l)" l)
    (("" (skeep)
      (("" (expand cmerge_sort 1)
        (("" (use cmerge_general_case)
          (("1" (lemma "cmerge_sort_length")
            (("1" (lemma "length_prefix")
              (("1" (lemma "length_suffix")
                (("1" (inst -2 "x" "floor(length(x) / 2)")
                  (("1" (inst -1 "x" "floor(length(x)/2)")
                    (("1" (lemma cmerge_sort_length)
                      (("1" (inst -1 "prefix(x, floor(length(x)/2))")
                        (("1" (inst -4 "suffix(x, floor(length(x)/2))")
                          (("1" (replaces)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (copy -2)
                                    (("2"
                                      (lemma length_suffix)
                                      (("2"
                                        (lemma length_prefix)
                                        (("2"
                                          (inst
                                           -1
                                           "x"
                                           "floor(length(x) / 2)")
                                          (("2"
                                            (inst
                                             -2
                                             "x"
                                             "floor(length(x) / 2)")
                                            (("2"
                                              (inst
                                               -3
                                               "prefix(x, floor(length(x) / 2))")
                                              (("1"
                                                (inst
                                                 -5
                                                 "suffix(x, floor(length(x) / 2))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "le_cut")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "cmerge(cmerge_sort(prefix(x, floor(length(x) / 2)))`1,
             cmerge_sort(suffix(x, floor(length(x) / 2)))`1,
             cmerge_sort(prefix(x, floor(length(x) / 2)))`2 +
              cmerge_sort(suffix(x, floor(length(x) / 2)))`2)`2"
                                                       "length(x) + cmerge_sort(prefix(x, floor(length(x) / 2)))`2 +
        cmerge_sort(suffix(x, floor(length(x) / 2)))`2"
                                                       "length(x) + length(x) * log(2)(length(x))")
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (replaces)
                                                          (("3"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_sort_is_nlgn_TCC1 0
  (merge_sort_is_nlgn_TCC1-1 nil 3783006760 ("" (subtype-tcc) nil nil)
   nil nil))
 (merge_sort_is_nlgn_TCC2 0
  (merge_sort_is_nlgn_TCC2-1 nil 3783006760 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (log_gt1 const-decl "[{r | r >= 1} -> nnreal]" nn_log "power/")
    (inverse const-decl "D" function_inverse nil)
    (nn_log const-decl "nnreal" nn_log "power/")
    (log const-decl "real" log "power/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (merge_sort_is_nlgn_TCC3 0
  (merge_sort_is_nlgn_TCC3-1 nil 3783006760 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (log_gt1 const-decl "[{r | r >= 1} -> nnreal]" nn_log "power/")
    (inverse const-decl "D" function_inverse nil)
    (nn_log const-decl "nnreal" nn_log "power/")
    (log const-decl "real" log "power/")
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (merge_sort_is_nlgn 0
  (merge_sort_is_nlgn-1 nil 3783006936 ("" (postpone) nil nil) nil
   shostak)))

