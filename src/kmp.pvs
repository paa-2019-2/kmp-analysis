kmp: THEORY
 BEGIN

 lps, answer, tail : VAR list[nat]
 pattern, text, tailC: VAR string
 i, j, index, head, actual : VAR nat
 headC : VAR char

 atC(actual, index, headC, tailC) : RECURSIVE char =
     IF index = actual THEN headC
     ELSE atC(actual+1, index, car(tailC), cdr(tailC))
     ENDIF
 MEASURE actual

 at(actual, index, head, tail) : RECURSIVE nat =
     IF index = actual THEN head
     ELSE at(actual+1, index, car(tail), cdr(tail))
     ENDIF
 MEASURE actual

 adjust_index_lps(j, i, pattern, lps) : RECURSIVE nat =
     IF j = 0 OR nth(pattern, i) = nth(pattern, j) THEN j
     ELSE adjust_index_lps(nth(lps, j-1), i, pattern, lps)
     ENDIF
 MEASURE j

 adjust_index_kmp(j, i, pattern, text, lps) : RECURSIVE nat =
     IF j <= 0 OR nth(pattern, j) = nth(text, i) THEN j
     ELSE adjust_index_kmp(j, nth(lps, j-1), pattern, text, lps)
     ENDIF
 MEASURE j

 prefix_func(i, j, pattern, lps) : RECURSIVE list[nat] =
     IF i >= length(pattern) THEN lps
     ELSE LET x = adjust_index_lps(j, i, pattern, lps) IN
	 IF nth(pattern, i) = nth(pattern, x) THEN
	    prefix_func(i+1, x+1, pattern, cons(x+1, lps))
	 ELSE
	    prefix_func(i+1, x, pattern, cons(x, lps))
	 ENDIF
     ENDIF
 MEASURE i

 kmp_search(pattern, text, lps, i, j, answer) : RECURSIVE list[nat] =
     IF i >= length(text) THEN answer
     ELSE LET x = adjust_index_kmp(j, i, pattern, text, lps) IN
         IF nth(pattern, x) = nth(text, i) THEN
	     IF x+1 = length(pattern) THEN
	     	kmp_search(pattern, text, lps, i+1, nth(lps, x), cons(i-length(pattern)+1, answer))
	     ELSE
		kmp_search(pattern, text, lps, i+1, x+1, answer)
	     ENDIF
         ELSE
	     IF x = length(pattern) THEN
		kmp_search(pattern, text, lps, i+1, nth(lps, x-1), cons(i-length(pattern)+1, answer))
	     ELSE
		kmp_search(pattern, text, lps, i+1, x, answer)
	     ENDIF
	 ENDIF
     ENDIF
MEASURE i

 kmp(pattern, text, answer) : list[nat] =
     kmp_search(pattern, text, prefix_func(0, 0, pattern, null), 0, 0, answer)

 

END kmp

