(mergesort_complexity
 (merge_sort_ws_TCC1 0
  (merge_sort_ws_TCC1-1 nil 3782076201 ("" (subtype-tcc) nil nil) nil
   nil))
 (merge_sort_ws 0
  (merge_sort_ws-1 nil 3782076205
   ("" (induct l)
    (("1" (assert) nil nil)
     ("2" (flatten)
      (("2" (expand length -1) (("2" (assert) nil nil)) nil)) nil)
     ("3" (skeep)
      (("3" (rewrite cmerge_sort 1)
        (("3" (lift-if)
          (("3" (prop)
            (("1" (assert)
              (("1" (expand length 1)
                (("1" (expand length -1) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (use "cmerge_general_case")
              (("2" (expand suffix)
                (("2" (expand prefix)
                  (("2" (use "le_cut")
                    (("2" (prop)
                      (("1"
                        (case "floor(length(cons(cons1_var, cons2_var)) / 2) = 0")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (hide 1 2 3) (("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (expand length) (("3" (grind) nil nil)) nil)) nil)
             ("4" (expand prefix)
              (("4" (expand suffix)
                (("4" (use "cmerge_general_case")
                  (("1" (use "le_cut") (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_sort_is_nlogn_TCC1 0
  (merge_sort_is_nlogn_TCC1-1 nil 3781388187
   ("" (skeep) (("" (typepred l) (("" (grind) nil nil)) nil)) nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (merge_sort_is_nlogn 0
  (merge_sort_is_nlogn-1 nil 3781429289
   ("" (induct l)
    (("1" (grind) nil nil) ("2" (skeep) (("2" (postpone) nil nil)) nil)
     ("3" (lemma "length_x_log") (("3" (propax) nil nil)) nil))
    nil)
   nil shostak)))

