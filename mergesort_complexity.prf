(mergesort_complexity
 (cmerge_equiv_merge 0
  (cmerge_equiv_merge-1 nil 3782153499
   ("" (induct l1)
    (("1" (skeep)
      (("1" (expand "merge")
        (("1" (expand "cmerge") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (induct l2)
        (("1" (expand "cmerge")
          (("1" (expand "merge") (("1" (propax) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (expand "merge" 1)
            (("2" (expand "cmerge" 1)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (merge def-decl "list[nat]" mergesort nil)
    (cmerge def-decl "[list[nat], nat]" cmergesort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (count_cmerge_ws 0
  (count_cmerge_ws-1 nil 3782514218
   ("" (induct l1)
    (("1" (expand "cmerge")
      (("1" (expand "length" 1 2)
        (("1" (skeep) (("1" (typepred l2) (("1" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (induct l2)
        (("1" (expand "cmerge" 1) (("1" (grind) nil nil)) nil)
         ("2" (skeep) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (cmerge def-decl "[list[nat], nat]" cmergesort nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (cmerge_general_case 0
  (cmerge_general_case-1 nil 3782514483 ("" (postpone) nil nil) nil
   shostak))
 (merge_sort_ws_TCC1 0
  (merge_sort_ws_TCC1-1 nil 3782076201 ("" (subtype-tcc) nil nil) nil
   nil))
 (merge_sort_ws 0
  (merge_sort_ws-1 nil 3782076205
   ("" (induct l)
    (("1" (assert) nil nil)
     ("2" (expand "length" 1 1) (("2" (propax) nil nil)) nil)
     ("3" (skeep)
      (("3" (lemma cmerge_general_case)
        (("3" (expand cmerge_sort) (("3" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_sort_is_nlogn_TCC1 0
  (merge_sort_is_nlogn_TCC1-1 nil 3781388187
   ("" (skeep) (("" (typepred l) (("" (grind) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nn_log const-decl "nnreal" nn_log "power/")
    (log_gt1 const-decl "[{r | r >= 1} -> nnreal]" nn_log "power/")
    (nnreal_expt const-decl "nnreal" nnreal_expt "power/")
    (nn_rational_expt const-decl "nnreal" nn_rational_expt "power/")
    (nn_root const-decl "nnreal" nn_root "power/")
    (inverse const-decl "D" function_inverse nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (numerator const-decl "int" rational_props_aux "power/")
    (denominator const-decl "posnat" rational_props_aux "power/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil))
 (merge_sort_is_nlogn_TCC2 0
  (merge_sort_is_nlogn_TCC2-1 nil 3782586118 ("" (subtype-tcc) nil nil)
   nil nil))
 (merge_sort_is_nlogn 0
  (merge_sort_is_nlogn-1 nil 3781429289
   ("" (expand "member")
    (("" (expand "Omicron")
      (("" (measure-induct "length(l)" l)
        (("" (skeep)
          (("" (hide -1)
            (("" (inst?)
              (("" (inst 1 "2")
                (("" (skeep)
                  (("" (use "merge_sort_ws")
                    (("" (typepred "x") (("" (postpone) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (merge_sort_length_1_is_nlogn_TCC1 0
  (merge_sort_length_1_is_nlogn_TCC1-1 nil 3782586118
   ("" (subtype-tcc) nil nil) nil nil))
 (merge_sort_length_1_is_nlogn_TCC2 0
  (merge_sort_length_1_is_nlogn_TCC2-1 nil 3782586118
   ("" (subtype-tcc) nil nil) nil nil))
 (merge_sort_length_1_is_nlogn 0
  (merge_sort_length_1_is_nlogn-1 nil 3782586119
   ("" (skeep)
    (("" (expand "member")
      (("" (expand "Omicron")
        (("" (inst?)
          (("" (inst?)
            (("" (skeep)
              (("" (typepred "l")
                (("" (replaces)
                  (("" (hide -1)
                    (("" (expand cmerge_sort 1 1)
                      (("" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cmerge_sort def-decl "[list[nat], nat]" cmergesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (log const-decl "real" log "power/")
    (nn_log const-decl "nnreal" nn_log "power/")
    (log_gt1 const-decl "[{r | r >= 1} -> nnreal]" nn_log "power/")
    (nnreal_expt const-decl "nnreal" nnreal_expt "power/")
    (nn_rational_expt const-decl "nnreal" nn_rational_expt "power/")
    (nn_root const-decl "nnreal" nn_root "power/")
    (inverse const-decl "D" function_inverse nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (numerator const-decl "int" rational_props_aux "power/")
    (denominator const-decl "posnat" rational_props_aux "power/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

